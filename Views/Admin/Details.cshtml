@using System.Globalization
@using Q42.DbTranslations.Helpers
@using Q42.DbTranslations.ViewModels
@model CultureGroupDetailsViewModel
@{
  Layout.Title = Model.Culture + " Localization";
  Script.Require("jQuery");
}

@using (Script.Foot())
{ 
  <script>
  //<![CDATA[
    $(window).load(function () {
      //$('#translations input, #translations textarea').addClass('default');
  		$('#translations input, #translations textarea').change(function (evt) {
  			$(this).removeClass().addClass('saving');
  			// save new value to database
  			var newValue = $(this).val();
  			var url = "/Admin/localize/update";
  			var postdata = { culture: '@Model.Culture', id: $(this).data('id'), value: newValue, __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val() }
 				$.post(url, postdata, onsuccess).error(function () { alert("error"); });
 	  	});

 		  $('.items input').bind('focus',function() {
 		    $(this).removeClass().addClass('flux');
 		  });

    	indicateValidatedCells(true); // indicate validity for all cells on page load
    });

    function indicateValidatedCells(checkAll) {
			var filter = '';
			checkAll ? filter = 'input' : filter = 'input.saving,input.flux';
  		$('.items').find(filter).each(function (i, e) {
  			if ($(e).val() != '' || $(e).attr('placeholder') != undefined) {
  				$(e).removeClass().addClass('valid');
  			} else {
  				$(e).removeClass().addClass('invalid');
  			}
  		});
  	}

    function onsuccess(data, textStatus, jqXHR) {
    	// todo vinkie
			indicateValidatedCells(false);
    }
  //]]>
  </script>
}

<style>
  #translations input  
  {
  	width: 95%; 
  	padding-left: 20px; 
  	border-width: 1px;
		border-style: solid;
		border-color: #BFBEBB #E7E6E3 #E7E6E3 #BFBEBB;
		border-radius: 4px;
		-moz-border-radius: 4px;
		-webkit-border-radius: 4px;
  }
  #translations textarea{ width: 100%; height: 100px; }
  
  #translations input, #translations textarea { background: #fdf5bc; }
  #translations input.valid, #translations textarea.valid  { background:#fff url(/Modules/Q42.DbTranslations/Content/form-valid.gif) no-repeat 1% 50%; }
  #translations input.invalid, #translations textarea.invalid  { background: none; background-color: #ffaaaa; }
  #translations input.saving, #translations textarea.saving  { background:#fff url(/Modules/Q42.DbTranslations/Content/loader.gif) no-repeat 1% 50%; } 
  #translations input.flux, #translations textarea.flux { background: none; background-color: white; }
</style>

@Html.AntiForgeryTokenOrchard()

<div class="content">
  @Html.ActionLink("Back to the index", "Culture", new { culture = Model.Culture })
  <h2>@LocalizationHelpers.GetPoFileName(Model.CurrentGroupPath) in @Model.Culture</h2>
  <div id="translations">
    <table class="items">
      <tr>
        <th width="50%">@T("Key")</th>
        <th width="50%">@T("Value in {0}", Model.Culture)</th>
      </tr>
      @foreach (var translationGroup in Model.CurrentGroupTranslations)
      {
        <tr>
          <th colspan="2">@translationGroup.Key</th>
        </tr>
        foreach (var translation in translationGroup.OrderBy(t => t.Key))
        {
          <tr>
            <td title="@translation.OriginalString">@translation.Key</td>
            <td>
              @if (!Model.CanTranslate)
              {
                @translation.LocalString
              }
              else if (translation.OriginalString.Contains('\n'))
              {
                <textarea name="@translation.Id">@translation.LocalString</textarea>
              }else {
                <input type="text" value="@translation.LocalString" name="@translation.Id" 
                  data-id="@translation.Id" @if (@translation.OriginalString != translation.Key) {<text>placeholder="@translation.OriginalString"</text>} />
              }
            </td>
          </tr>
        }
      }
    </table>
  </div>
</div>
